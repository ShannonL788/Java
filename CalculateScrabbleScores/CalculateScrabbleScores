import java.util.Scanner;

public class CalculateScrabbleScores {
    public static void main(String[] args) {
    	Scanner scan = new Scanner(System.in);
    	int size = scan.nextInt();
    	scan.nextLine(); // Consume newline
    	
    	// Create arrays to store words and corresponding scrabble points
    	String [] words = new String[size];
    	int [] points = new int[size];
    	
    	// Fill arrays with user input and calculated points
    	for(int i = 0; i < size; i++) {
    		words[i] = scan.nextLine();
    		points[i] = calculateScores(words[i]);
    	}
    	
    	sortWords(points, words); // Call method to sort arrays
    	
        scan.close();
    }

    /**
     * Calculates the Scrabble score for a given word.
     * @param word The word for which to calculate the score.
     * @return The Scrabble score of the word.
     */
        
    public static int calculateScores(String word) {
    	word = word.toUpperCase(); // Allows for case-insensitive comparison
    	int points = 0;
    	
    	// Loop through each character and add points
    	for(int i = 0; i < word.length(); i++) {
    		switch(word.charAt(i)) {
    		case 'A': case 'E': case 'I': case 'O': case 'U': case 'L': case 'N': case 'S': case 'T': case 'R':
    			points += 1; break;
    			
    		case 'D': case 'G': 
    			points += 2; break;
    			
    		case 'B': case 'C': case 'M': case 'P': 
    			points += 3; break;
    			
    		case 'F': case 'H': case 'V': case 'W': case 'Y': 
    			points += 4; break;
    			
    		case 'K': 
    			points += 5; break;
    			
    		case 'J': case 'X': 
    			points += 8; break;
    			
    		case 'Q': case 'Z': 
    			points += 10; break;
    		}
    	}
    	return points;
    }

    /**
     * Sorts words and their scores using bubble sort.
     * @param points Array of scores corresponding to the words.
     * @param words Array of words to be sorted along with their scores.
     */

    public static void sortWords(int [] points, String [] words) {
    	boolean swapped;
        do {
            swapped = false;
            for (int i = 0; i < words.length - 1; i++) {
            	// Swap if the first word has a higher score or is first alphabetically
            	if (points[i] > points[i + 1] || (points[i] == points[i + 1] && words[i].compareTo(words[i + 1]) > 0)) {
                    int tempPoints = points[i];
                    points[i] = points[i + 1];
                    points[i + 1] = tempPoints;
                    
                    String tempName = words[i];
                    words[i] = words[i + 1];
                    words[i + 1] = tempName;

                    swapped = true; 
                }
            }
        } while (swapped); // Continue looping until no more swaps are made
        
        for(int i = 0; i < words.length; i++) {
       	 System.out.println(words[i] + ": " + points[i] + " points");
        }
    }
}


